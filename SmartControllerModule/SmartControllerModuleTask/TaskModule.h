///////////////////////////////////////////////////////////////////////////////
// TaskModule.h
#pragma once

#include "SmartControllerModuleTaskInterfaces.h"
#include "AdsR0.h"
#include "Kinematics.h"
#include "PIDControl.h"
#include "SEATorqueControl.h"
#include "ConvertClass.h"
#include "AlpopcLib.h"
#include "AlteleoperationLib.h"
#include <vector>

#define BUTTON_WINDOW_SIZE 30

#pragma pack(push, 1)
typedef struct {
	// Position Mode Gain
	FLOAT	Pos_Pgain[3];
	FLOAT	Pos_Igain[3];
	FLOAT	Pos_Dgain[3];

	// Velocity Mode Gain
	FLOAT	Vel_Pgain[3];
	FLOAT	Vel_Igain[3];
	FLOAT	Vel_Dgain[3];

	// Torque Mode Gain
	FLOAT	Torq_Pgain[3];
	FLOAT	Torq_Igain[3];
	FLOAT	Torq_Dgain[3];

	//Joint Efficient Const.
	FLOAT	J_EffiCont[3];
	//Joint Torque Const.
	FLOAT	J_TorqueConst[3];
	//Joint Spring Const.
	FLOAT	J_SpringConst[3];

	//*   Joint Mode   *//
	//Joint Target Position.
	FLOAT	J_TargetPoistion[3];
	//Joint Target Time.
	FLOAT	J_TargetTime[3];
	//Joint Accel TIme.
	FLOAT	J_AccelTime[3];

	//*   Cartesian Mode   *//
	//Joint Target Position.
	FLOAT	C_TargetPoistion[3];
	//Joint Target Time.
	FLOAT	C_TargetTime[3];
	//Joint Accel TIme.
	FLOAT	C_AccelTime[3];

	//Buffer Data (Left).
	FLOAT	CMD_BufferL1[3];
	FLOAT	CMD_BufferL2[3];
	FLOAT	CMD_BufferL3[3];

	FLOAT	CMD_BufferL4[3];
	FLOAT	CMD_BufferL5[3];
	FLOAT	CMD_BufferL6[3];
	
	//Buffer Data (Right).
	FLOAT	CMD_BufferR1[3];
	FLOAT	CMD_BufferR2[3];
	FLOAT	CMD_BufferR3[3];

	FLOAT	CMD_BufferR4[3];
	FLOAT	CMD_BufferR5[3];
	FLOAT	CMD_BufferR6[3];
	
	//Cartasian Gain.
	FLOAT	Cartesian_Pgain[3];
	FLOAT	Cartesian_Igain[3];
	FLOAT	Cartesian_Dgain[3];

}ADSClient_SystemData;

typedef struct{
	FLOAT	actual_motor_position[3];
	FLOAT	actual_link_position[3];
	FLOAT   actual_motor_velocity[3];
	FLOAT	actual_link_velocity[3];
	FLOAT	actual_current[3];
	FLOAT	target_position[3];
	FLOAT	target_velocity[3];
	FLOAT	target_current[3];
	LONG	mode_of_operation[3];
	LONG	status_word[3];

	FLOAT	cartesian_target_pose[3];
	FLOAT	cartesian_current_pose[3];
	FLOAT	cartesian_current_orientation[3];
	FLOAT	energy[3];

	FLOAT	E_slave_in[3];
	FLOAT	E_master_out_origin[3];
	FLOAT	E_master_out[3];
	FLOAT	Fm[3];
	FLOAT	F_modified[3];
	FLOAT	Vm[3];

	//UINT16	m_button_left;
	UINT16	m_button_left_filtered;
	//UINT16	m_button_right;
	UINT16	m_button_right_filtered;
}Axis_data;

typedef struct {
	LONG	m_Cnt[100];
	LONG	m_log_cnt;
	LONG	m_cycle_sec;
	LONG    m_cycle_min;
	LONG	m_cycle_hour;
	LONG	Gravity_Mode;
	LONG    TorquePosition_Mode;
	LONG	target_reached;
	LONG	m_dSystemMode;
	FLOAT	accel_time[3];
	FLOAT	target_reach_time[3];
	FLOAT	TestBuffer1[3];
	FLOAT	TestBuffer2[3];
	FLOAT	TestBuffer3[3];
	Axis_data	m_Axis_L[100];
	Axis_data	m_Axis_R[100];
}ADSServer_SystemData;



struct Machine_struct
{
	FLOAT force[3];
	FLOAT s_energy[3];
};


struct ADSPOPC_SystemData
{
	LONG log_cnt;
	Machine_struct left;
	Machine_struct right;
};

#pragma(pop)

typedef struct {
	int max;
	int num;
	int rear;
	int front;
	Machine_struct *que;
}Queue;



// parameter ids for TwinCAT module TaskModule with disabled code generation
// could be moved to SmartControllerModuleTaskServices.h
const PTCID PID_TaskModuleAdsPort        = 0x00000002;

class CTaskModule 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
	, public CAdsR0FifoPort
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_SmartControllerModuleTaskCTaskModule)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CTaskModule();
	virtual	~CTaskModule();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

	// CAds
	virtual	void	AdsReadWriteInd
	(
		AmsAddr& rAddr, 
		ULONG invokeId, 
		ULONG indexGroup,
		ULONG indexOffset, 
		ULONG cbReadLength, 
		ULONG cbWriteLength, 
		PVOID pData 
	);

	virtual void AdsReadCon
	(
		AmsAddr& rAddr, 
		ULONG invokeId, 
		ULONG result, 
		ULONG cbLength, 
		PVOID pData
	);

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	WORD m_DefaultAdsPort;
	WORD m_ContextAdsPort;
	ULONG m_Counter;
	TaskModuleInputs m_Inputs;
	TaskModuleOutputs m_Outputs;
	TaskModuleInputEtherCAT m_InputEtherCAT;
	TaskModuleOutputEtherCAT m_OutputEtherCAT;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	void SubmitAdsReadReq();
	enum 
	{
		invokeIdReadByOidAndPid = 1
	};
	ULONG  m_ReadByOidAndPid;

	//sample code
	BOOL m_bCount;
	//sample code end
	BOOL		m_ButtonFlag;
	ULONG		m_ButtonSet;
	INT			m_AxisCnt;
	BOOL		m_bPOCtrlFlag;
	BOOL		m_bVelocityModeFlag;

	ADSServer_SystemData m_logdata;
	ADSClient_SystemData m_Client_CMD;
	ADSPOPC_SystemData m_popc_data;

	Machine_struct left_popc;
	Machine_struct right_popc;

	INT			len;
	INT			m_cnt;
	INT			log_cnt;
	LONG		init_pos_value;
	LONG		init_move_value;
	BOOL		init_pos_mode;
	BOOL		init_zero_pos_mode;
	INT		    Gain_Index;
	INT			Packet_Limit;

	Kinematics* l_m_KinClass;
	Kinematics* r_m_KinClass;

	Kinematics* l_m_Orientation;
	Kinematics* l_m_Orientation_wrist;

	Kinematics* r_m_Orientation;
	Kinematics* r_m_Orientation_wrist;

	PIDControlClass * l_m_PIDTorque[3];
	PIDControlClass * l_m_PIDCartesian[3];

	PIDControlClass * r_m_PIDTorque[3];
	PIDControlClass * r_m_PIDCartesian[3];

	SEATorqueControl* l_Torquecontroller_J[3];
	SEATorqueControl* r_Torquecontroller_J[3];

	AlpopcLib* l_popcLibclass[3];
	AlpopcLib* r_popcLibclass[3];

	AlteleoperationLib * l_rateModecontrol;
	AlteleoperationLib * r_rateModecontrol;

	ConvertClass m_ConvertClass;

	UINT16 m_button_left_prev;
	UINT16 m_button_left_cur;
	UINT16 m_button_left_counter;
	UINT16 m_button_left_filtered;

	UINT16 m_button_right_prev;
	UINT16 m_button_right_cur;
	UINT16 m_button_right_counter;
	UINT16 m_button_right_filtered;

	bool c_encoderMethod;

	int m_state_select;

	int DemoCount;
	bool demo_mode;

	float testfloat;

	int m_Compensator_start;

	int haptic_enable;

	///////////////////////////////////////////////////
	///////////// Left Side Paramter //////////////////
	///////////////////////////////////////////////////

	// Convert Parm
	float	l_Joint_ENC[3];
	float	l_joint_RAD[3];
	float	l_joint_DEG[3];

	float l_current_tor[3];
	float l_target_tor[3];// = { 0.0, 0.0, 0.0 };

	float l_target_cur[3];

	float l_motor_pos[3];// = { 0.0, 0.0, 0.0 };
	float l_motor_vel[3];// = { 0.0, 0.0, 0.0 };
	float l_link_pos[3];// = { 0.0, 0.0, 0.0 };
	float l_link_vel[3];// = { 0.0, 0.0, 0.0 };
	float l_link_pos_old[3];// = { 0.0, 0.0, 0.0 };

	float l_roll;
	float l_pitch;
	float l_yaw;


	float l_feedback_tor[3];// = { 0.0, 0.0, 0.0 };
	float l_feedforward_tor[3];// = { 0.0, 0.0, 0.0 };
	float l_torqueCMD[3];// = { 0.0, 0.0, 0.0 };

	float l_current_pos[3];// = { 0.0, 0.0, 0.0 };
	float l_target_pos[3];// = { 0.0, 0.0, 0.0 };
	float l_target_amplitude_tri[3];// = { 0.0, 0.0, 0.0 };
	float l_cycle_time_tri;// = 10;
	float l_target_time;// = 10;
	float l_accel_time;// = 2;
	float l_dt;

	float l_initial_motor_pos[3];
	float l_initial_link_pos[3];

	float l_temp_gain_01[3];
	float l_temp_gain_02[3];
	float l_temp_gain_03[3];
	float l_temp_gain_04[3];
	float l_temp_gain_05[3];
	float l_temp_gain_06[3];
	float l_time_step;

	float l_m_start_pose[3];
	float l_m_current_pose[3];//현재 포워드 결과값, 직교좌표 위치 x y z
	float l_m_current_pose_prev[3];
	float l_m_current_vel[3];
	float l_m_target_pose[3];//클라이언트에서 넘어온 목표위치 x y z
	float l_m_target_pose_temp[3];
	float l_m_pose_PID_Out[3];//VSD 작용 힘
	float l_m_pose_VSD_Torq[3];//VSD 커맨드 토크

	float l_m_current_jacobtrans[3][3];//현재 자코비안 트랜스포즈
	float l_m_current_mjacobtrans[3][3];

	float l_m_grav_matrix[3];
	float l_m_friction_compensator[3];

	// left popc variable

	float l_E_slave_in[3];
	float l_E_master_in[3];
	float l_E_master_out[3];
	float l_E_master_out_origin[3];
	float l_Modified_force[3];


	///////////////////////////////////////////////////
	///////////// Right Side Paramter /////////////////
	///////////////////////////////////////////////////


	// Convert Parm
	float	r_Joint_ENC[3];
	float	r_joint_RAD[3];
	float	r_joint_DEG[3];

	float r_current_tor[3];
	float r_target_tor[3];// = { 0.0, 0.0, 0.0 };

	float r_target_cur[3];

	float r_motor_pos[3];// = { 0.0, 0.0, 0.0 };
	float r_motor_vel[3];// = { 0.0, 0.0, 0.0 };
	float r_link_pos[3];// = { 0.0, 0.0, 0.0 };
	float r_link_vel[3];// = { 0.0, 0.0, 0.0 };
	float r_link_pos_old[3];// = { 0.0, 0.0, 0.0 };

	float r_roll;
	float r_pitch;
	float r_yaw;

	float r_feedback_tor[3];// = { 0.0, 0.0, 0.0 };
	float r_feedforward_tor[3];// = { 0.0, 0.0, 0.0 };
	float r_torqueCMD[3];// = { 0.0, 0.0, 0.0 };

	float r_current_pos[3];// = { 0.0, 0.0, 0.0 };
	float r_target_pos[3];// = { 0.0, 0.0, 0.0 };
	float r_target_amplitude_tri[3];// = { 0.0, 0.0, 0.0 };
	float r_cycle_time_tri;// = 10;
	float r_target_time;// = 10;
	float r_accel_time;// = 2;
	float r_dt;

	float r_initial_motor_pos[3];
	float r_initial_link_pos[3];

	float r_temp_gain_01[3];
	float r_temp_gain_02[3];
	float r_temp_gain_03[3];
	float r_temp_gain_04[3];
	float r_temp_gain_05[3];
	float r_temp_gain_06[3];
	float r_time_step;

	float r_m_start_pose[3];
	float r_m_current_pose[3];//현재 포워드 결과값, 직교좌표 위치 x y z
	float r_m_current_pose_prev[3];
	float r_m_current_vel[3];
	float r_m_target_pose[3];//클라이언트에서 넘어온 목표위치 x y z
	float r_m_target_pose_temp[3];
	float r_m_pose_PID_Out[3];//VSD 작용 힘
	float r_m_pose_VSD_Torq[3];//VSD 커맨드 토크

	float r_m_current_jacobtrans[3][3];//현재 자코비안 트랜스포즈
	float r_m_current_mjacobtrans[3][3];

	float r_m_grav_matrix[3];
	float r_m_friction_compensator[3];

	// right popc variable
	float r_E_slave_in[3];
	float r_E_master_in[3];
	float r_E_master_out[3];
	float r_E_master_out_origin[3];
	float r_Modified_force[3];

	int m_mode_num;
	

};
